#!/usr/bin/env node

import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import { 
  CallToolRequestSchema, 
  ListToolsRequestSchema,
  CallToolRequest 
} from '@modelcontextprotocol/sdk/types.js';
import { execSync } from 'node:child_process';

// Mapeamento de tipos de altera√ß√£o para Gitmoji
const GITMOJI_MAP: Record<string, string> = {
  'feat': '‚ú®', // Nova funcionalidade
  'fix': 'üêõ', // Corre√ß√£o de bug
  'docs': 'üìù', // Documenta√ß√£o
  'style': 'üíÑ', // Estilo/formata√ß√£o
  'refactor': '‚ôªÔ∏è', // Refatora√ß√£o
  'test': '‚úÖ', // Testes
  'chore': 'üîß', // Tarefas de manuten√ß√£o
  'perf': '‚ö°Ô∏è', // Performance
  'build': 'üë∑', // Build/CI
  'ci': 'üíö', // CI/CD
  'revert': '‚è™Ô∏è', // Reverter
  'remove': 'üî•', // Remover c√≥digo
  'add': '‚ûï', // Adicionar depend√™ncia
  'update': '‚¨ÜÔ∏è', // Atualizar
  'config': 'üîß', // Configura√ß√£o
  'init': 'üéâ', // Inicial
  'security': 'üîíÔ∏è', // Seguran√ßa
  'ui': 'üíÑ', // Interface
  'database': 'üóÉÔ∏è', // Database
  'api': 'üëΩÔ∏è', // API/Mudan√ßas externas
  'merge': 'üîÄ', // Merge
  'hotfix': 'üöëÔ∏è', // Hotfix
  'wip': 'üöß', // Work in progress
  'cleanup': 'üî•', // Limpeza/Remo√ß√£o
  'art': 'üé®', // Melhorar estrutura/formato
  'rocket': 'üöÄ', // Deploy
  'bookmark': 'üîñ', // Release/Tags
  'rotating_light': 'üö®', // Corrigir warnings
  'package': 'üì¶Ô∏è', // Arquivos compilados
  'boom': 'üí•', // Breaking changes
  'memo': 'üìù', // Adicionar documenta√ß√£o
  'truck': 'üöö', // Mover/renomear arquivos
  'wrench': 'üîß', // Configura√ß√£o
  'hammer': 'üî®', // Scripts de desenvolvimento
  'lock': 'üîíÔ∏è', // Seguran√ßa
  'arrow_up': '‚¨ÜÔ∏è', // Upgrade depend√™ncias
  'arrow_down': '‚¨áÔ∏è', // Downgrade depend√™ncias
  'pushpin': 'üìå', // Pin depend√™ncias
  'construction_worker': 'üë∑', // CI/Build
  'chart_with_upwards_trend': 'üìà', // Analytics
  'recycle': '‚ôªÔ∏è', // Refatora√ß√£o
  'heavy_plus_sign': '‚ûï', // Adicionar depend√™ncia
  'heavy_minus_sign': '‚ûñ', // Remover depend√™ncia
  'globe_with_meridians': 'üåê', // Internacionaliza√ß√£o
  'pencil2': '‚úèÔ∏è', // Corrigir typos
  'rewind': '‚è™Ô∏è', // Reverter mudan√ßas
  'twisted_rightwards_arrows': 'üîÄ', // Merge branches
  'alien': 'üëΩÔ∏è', // Mudan√ßas API externa
  'page_facing_up': 'üìÑ', // Licen√ßa
  'bento': 'üç±', // Assets
  'wheelchair': '‚ôøÔ∏è', // Acessibilidade
  'bulb': 'üí°', // Coment√°rios
  'speech_balloon': 'üí¨', // Textos/literais
  'card_file_box': 'üóÉÔ∏è', // Database
  'loud_sound': 'üîä', // Logs
  'mute': 'üîá', // Remover logs
  'busts_in_silhouette': 'üë•', // Colaboradores
  'children_crossing': 'üö∏', // UX/Usabilidade
  'building_construction': 'üèóÔ∏è', // Arquitetura
  'iphone': 'üì±', // Responsivo
  'clown_face': 'ü§°', // Mocks
  'egg': 'ü•ö', // Easter eggs
  'see_no_evil': 'üôà', // .gitignore
  'camera_flash': 'üì∏', // Snapshots
  'alembic': '‚öóÔ∏è', // Experimentos
  'mag': 'üîçÔ∏è', // SEO
  'label': 'üè∑Ô∏è', // Types
  'seedling': 'üå±', // Seed files
  'triangular_flag_on_post': 'üö©', // Feature flags
  'goal_net': 'ü•Ö', // Catch errors
  'dizzy': 'üí´', // Anima√ß√µes
  'wastebasket': 'üóëÔ∏è', // Deprecar c√≥digo
  'passport_control': 'üõÇ', // Autoriza√ß√£o
  'adhesive_bandage': 'ü©π', // Fix simples
  'monocle_face': 'üßê', // Explora√ß√£o de dados
  'coffin': '‚ö∞Ô∏è', // C√≥digo morto
  'test_tube': 'üß™', // Teste que falha
  'necktie': 'üëî', // L√≥gica de neg√≥cio
  'stethoscope': 'ü©∫', // Healthcheck
  'bricks': 'üß±', // Infraestrutura
  'technologist': 'üßë‚Äçüíª', // Developer experience
  'money_with_wings': 'üí∏', // Patroc√≠nios
  'thread': 'üßµ', // Multithreading
  'safety_vest': 'ü¶∫', // Valida√ß√£o
  'airplane': '‚úàÔ∏è', // Suporte offline
  'default': '‚ú®' // Padr√£o
};

class CommitGeneratorServer {
  private server: Server;

  constructor() {
    this.server = new Server(
      {
        name: 'mcp-acordos-commit-generator',
        version: '1.0.0',
      },
      {
        capabilities: {
          tools: {},
        },
      }
    );

    this.setupToolHandlers();
  }

  private setupToolHandlers() {
    this.server.setRequestHandler(ListToolsRequestSchema, async () => {
      return {
        tools: [
          {
            name: 'gerar_commit',
            description: 'Gera mensagem de commit seguindo as regras espec√≠ficas do projeto',
            inputSchema: {
              type: 'object',
              properties: {
                alteracoes: {
                  type: 'string',
                  description: 'Descri√ß√£o das altera√ß√µes realizadas'
                },
                arquivos: {
                  type: 'array',
                  items: { type: 'string' },
                  description: 'Lista de arquivos alterados'
                },
                id_task: {
                  type: 'string',
                  description: 'ID da Task (opcional)'
                },
                tipo_alteracao: {
                  type: 'string',
                  enum: ['feat', 'fix', 'docs', 'style', 'refactor', 'test', 'chore', 'perf', 'build', 'ci', 'revert', 'remove', 'add', 'update', 'config', 'init', 'security', 'ui', 'database', 'api', 'merge', 'hotfix', 'wip', 'cleanup', 'art', 'rocket', 'bookmark', 'rotating_light', 'package', 'boom', 'memo', 'truck', 'wrench', 'hammer', 'lock', 'arrow_up', 'arrow_down', 'pushpin', 'construction_worker', 'chart_with_upwards_trend', 'recycle', 'heavy_plus_sign', 'heavy_minus_sign', 'globe_with_meridians', 'pencil2', 'rewind', 'twisted_rightwards_arrows', 'alien', 'page_facing_up', 'bento', 'wheelchair', 'bulb', 'speech_balloon', 'card_file_box', 'loud_sound', 'mute', 'busts_in_silhouette', 'children_crossing', 'building_construction', 'iphone', 'clown_face', 'egg', 'see_no_evil', 'camera_flash', 'alembic', 'mag', 'label', 'seedling', 'triangular_flag_on_post', 'goal_net', 'dizzy', 'wastebasket', 'passport_control', 'adhesive_bandage', 'monocle_face', 'coffin', 'test_tube', 'necktie', 'stethoscope', 'bricks', 'technologist', 'money_with_wings', 'thread', 'safety_vest', 'airplane'],
                  description: 'Tipo da altera√ß√£o para escolher o Gitmoji apropriado'
                }
              },
              required: ['alteracoes', 'arquivos']
            }
          }
        ]
      };
    });

    this.server.setRequestHandler(CallToolRequestSchema, async (request: CallToolRequest) => {
      if (request.params.name === 'gerar_commit') {
        return this.handleGerarCommit(request.params.arguments);
      }
      
      throw new Error(`Fun√ß√£o n√£o encontrada: ${request.params.name}`);
    });
  }

  private async handleGerarCommit(args: any) {
    try {
      const { alteracoes, arquivos, id_task, tipo_alteracao = 'default' } = args;
      
      // Obter branch atual
      const currentBranch = this.getCurrentBranch();
      
      // Gerar mensagem de commit
      const commitMessage = this.generateCommitMessage(
        alteracoes,
        arquivos,
        id_task,
        tipo_alteracao,
        currentBranch
      );

      return {
        content: [
          {
            type: 'text',
            text: commitMessage
          }
        ]
      };
    } catch (error) {
      return {
        content: [
          {
            type: 'text',
            text: `Erro ao gerar commit: ${error instanceof Error ? error.message : 'Erro desconhecido'}`
          }
        ],
        isError: true
      };
    }
  }

  private getCurrentBranch(): string {
    try {
      const branch = execSync('git branch --show-current', { encoding: 'utf8' }).trim();
      return branch;
    } catch (error) {
      console.error('Erro ao obter branch atual:', error);
      return '';
    }
  }

  private generateCommitMessage(
    alteracoes: string,
    arquivos: string[],
    idTask?: string,
    tipoAlteracao: string = 'default',
    currentBranch: string = ''
  ): string {
    let titulo = '';
    
    // 1. Verificar se deve incluir nome da branch (somente se come√ßar com "SAAS-")
    if (currentBranch && currentBranch.startsWith('SAAS-')) {
      titulo += `${currentBranch} `;
    }
    
    // 2. Adicionar ID da Task se fornecido (sempre, independente da branch)
    if (idTask) {
      titulo += `${idTask} `;
    }
    
    // 3. Adicionar Gitmoji baseado no tipo de altera√ß√£o
    const gitmoji = GITMOJI_MAP[tipoAlteracao] || GITMOJI_MAP['default'];
    titulo += `${gitmoji} `;
    
    // 4. Adicionar descri√ß√£o sucinta
    titulo += alteracoes;
    
    // 5. Gerar descri√ß√£o detalhada por arquivo
    let descricao = '';
    if (arquivos && arquivos.length > 0) {
      descricao = '\n\n**Arquivos alterados:**\n';
      arquivos.forEach(arquivo => {
        descricao += `- \`${arquivo}\`: ${alteracoes}\n`;
      });
    }
    
    // Retornar mensagem em formato markdown
    return `\`\`\`
${titulo}${descricao}
\`\`\``;
  }

  async run() {
    const transport = new StdioServerTransport();
    await this.server.connect(transport);
    console.error('MCP Acordos Commit Generator iniciado');
  }
}

const server = new CommitGeneratorServer();
server.run().catch(console.error); 